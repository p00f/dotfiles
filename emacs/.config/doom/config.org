#+TITLE: Doom emacs config
#+AUTHOR: Chinmay Dalal
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes
* Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#general-config][General config]]
    - [[#personal-info][Personal info]]
    - [[#org-config][Org config]]
  - [[#doom-config][Doom config]]
    - [[#theme][Theme]]
    - [[#relative-line-numbers][Relative line numbers]]
    - [[#fonts][Fonts]]
    - [[#email][Email]]

* Configuration
** General config
*** Personal info
Used by GPG configuration, email clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(load "~/.config/doom/mail-ids")
(setq user-full-name "Chinmay Dalal")
(setq user-mail-address "dalal.chinmay.0101@gmail.com")
#+END_SRC


*** Org config
#+BEGIN_SRC emacs-lisp
(require 'org)
(setq org-directory "~/org/")
(require 'ox-latex)
(setq org-latex-listings 'minted)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-export-use-babel nil)
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -shell-escape %f" "pdflatex -interaction nonstopmode -shell-escape %f" "pdflatex -interaction nonstopmode -shell-escape %f"))
#+END_SRC


** Doom config
*** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'ewal-doom-vibrant)
#+END_SRC
*** Relative line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC
*** Fonts
Variables accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.
#+BEGIN_SRC emacs-lisp
;(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;      doom-variable-pitch-font (font-spec :family "sans" :size 13))

(setq doom-font (font-spec :family "Source Code Pro" :size 15)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 15)
      doom-unicode-font (font-spec :family "FontAwesome 5 Free" :size 12)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light)
      doom-big-font (font-spec :family "Fira Code" :size 19))
#+END_SRC

#+RESULTS:
: #<font-spec nil nil Fira\ Code nil nil nil nil nil 19 nil nil nil nil>

*** Email
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)

(use-package mu4e
  :init
  (add-load-path! "/usr/share/emacs/site-lisp/mu4e")
  :config
  (add-hook 'message-mode-hook 'auto-fill-mode)
  (setq mu4e-compose-format-flowed t)
  (setq message-cite-reply-position 'below)
  (setq-default fill-column 72)
  (setq fill-flowed-encode-column fill-column)

  (progn (setq mail-user-agent 'mu4e-user-agent
               sendmail-program "/usr/bin/msmtp"
               mu4e-get-mail-command "mbsync"
               message-send-mail-function 'smtpmail-send-it
               message-sendmail-f-is-evil t
               message-sendmail-extra-arguments '("--read-envelope-from")
               message-send-mail-function 'message-send-mail-with-sendmail
               mu4e-sent-messages-behavior 'delete)

         (setq mu4e-headers-date-format "%d-%m-%Y %H:%M"
               mu4e-headers-fields '((:human-date . 20)
                                     (:flags . 6)
                                     (:from . 22)
                                     (:maildir . 8)
                                     (:subject)))

         (setq mu4e-contexts
               `( ,(make-mu4e-context
                    :name "Personal"
                    :match-func (lambda (msg) (when msg
                                                (string-prefix-p "/GMail" (mu4e-message-field msg :maildir))))
                    :vars `(
                            (mu4e-refile-folder           . "/GMail/[Gmail]/Archive")
                            (mu4e-drafts-folder           . "/GMail/[Gmail]/Drafts")
                            (mu4e-sent-folder             . "/GMail/[Gmail]/Sent Mail")
                            (mu4e-trash-folder            . "/GMail/[Gmail]/Bin")
                            (smtpmail-stream-type         . tls)
                            (smtpmail-default-smtp-server . "smtp.gmail.com")
                            (smtpmail-smtp-server         . "smtp.gmail.com")
                            (smtpmail-smtp-service        . 587)
                            (smtpmail-smtp-user           . "dalal.chinmay.0101@gmail.com")
                            (user-mail-address            . "dalal.chinmay.0101@gmail.com")))
                  ,(make-mu4e-context
                    :name "BITS"
                    :match-func (lambda (msg) (when msg
                                                (string-prefix-p "/BITS" (mu4e-message-field msg :maildir))))
                    :vars `(
                            (mu4e-refile-folder           . "/BITS/[Gmail]/Archive")
                            (mu4e-drafts-folder           . "/BITS/[Gmail]/Drafts")
                            (mu4e-sent-folder             . "/BITS/[Gmail]/Sent Mail")
                            (mu4e-trash-folder            . "/BITS/[Gmail]/Trash")
                            (smtpmail-stream-type         . tls)
                            (smtpmail-default-smtp-server . "smtp.gmail.com")
                            (smtpmail-smtp-server         . "smtp.gmail.com")
                            (smtpmail-smtp-service        . 587)
                            (user-mail-address            . ,(college-mail))
                            (smtpmail-smtp-user           . ,(college-mail))))))))


(mu4e-alert-set-default-style 'libnotify)
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
(setq mu4e-alert-interesting-mail-query
      (concat
       "flag:unread"
       " AND NOT flag:trashed"
       " AND NOT maildir:"
       "/BITS/[Gmail].All Mail"
       " AND NOT maildir:"
       "/GMail/[Gmail].All Mail"))
#+END_SRC


Create org-mode tasks with links to emails
#+BEGIN_SRC emacs-lisp
(require 'org-mu4e)
;;store link to message if in header view, not to header query
(setq mu4e-org-link-query-in-headers-mode nil)
(setq org-capture-templates
      '(("t" "todo" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))
#+END_SRC
