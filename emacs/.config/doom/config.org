#+TITLE: Doom emacs config
#+AUTHOR: Chinmay Dalal
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes
* Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#general-config][General config]]
    - [[#personal-info][Personal info]]
    - [[#org-directory][Org directory]]
  - [[#doom-config][Doom config]]
    - [[#theme][Theme]]
    - [[#relative-line-numbers][Relative line numbers]]
    - [[#fonts][Fonts]]
  - [[#package-config][Package config]]
    - [[#email][Email]]
    - [[#clojure-cookbook][Clojure cookbook]]
    - [[#tree-sitter][tree-sitter]]
    - [[#set-online-judge-directory][set online-judge directory]]
    - [[#discord-rpc][Discord RPC]]

* Configuration
** General config
*** Personal info
Used by GPG configuration, email clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(load "~/.config/doom/mail-ids")
(setq user-full-name "Chinmay Dalal")
(setq user-mail-address (personal-mail))
#+END_SRC


*** Org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC


** Doom config
*** Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set ~doom-theme~ or manually load a theme with the ~load-theme~ function. This is the default:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dark+)
(setq doom-modeline-github t)
(setq all-the-icons-color-icons t)
(setq doom-modeline-icon (display-graphic-p))
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-buffer-encoding t)
(parrot-mode)
(load "~/.config/doom/splash")
#+END_SRC
*** Relative line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC
*** Fonts
Variables accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.
#+BEGIN_SRC emacs-lisp
;(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;      doom-variable-pitch-font (font-spec :family "sans" :size 13))

(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 15)
      doom-unicode-font (font-spec :family "FontAwesome 5 Free" :size 12)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light)
      doom-big-font (font-spec :family "JetBrains Mono" :size 19))
#+END_SRC


** Package config
- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to this file. Emacs searches the ~load-path~ when you load packages with ~require~ or ~use-package~.
- ~map!~ for binding new keys

*** Email
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)

(use-package mu4e
  :init
  (add-load-path! "/usr/share/emacs/site-lisp/mu4e")
  :config
  (progn (setq mail-user-agent 'mu4e-user-agent
               sendmail-program "/usr/bin/msmtp"
               mu4e-get-mail-command "offlineimap"
               message-send-mail-function 'smtpmail-send-it
               message-sendmail-f-is-evil t
               message-sendmail-extra-arguments '("--read-envelope-from")
               message-send-mail-function 'message-send-mail-with-sendmail
               mu4e-sent-messages-behavior 'delete)

         (setq mu4e-headers-date-format "%d-%m-%Y %H:%M"
               mu4e-headers-fields '((:human-date . 20)
                                     (:flags . 6)
                                     (:from . 22)
                                     (:maildir . 8)
                                     (:subject)))

         (setq mu4e-contexts
               `( ,(make-mu4e-context
                    :name "Personal"
                    :match-func (lambda (msg) (when msg
                                                (string-prefix-p "/GMail" (mu4e-message-field msg :maildir))))
                    :vars `(
                            (mu4e-refile-folder           . "/GMail/[Gmail].Archive")
                            (mu4e-drafts-folder           . "/GMail/[Gmail].Drafts")
                            (mu4e-sent-folder             . "/GMail/[Gmail].Sent Mail")
                            (mu4e-trash-folder            . "/GMail/Trash")
                            (smtpmail-stream-type         . tls)
                            (smtpmail-default-smtp-server . "smtp.gmail.com")
                            (smtpmail-smtp-server         . "smtp.gmail.com")
                            (smtpmail-smtp-service        . 587)
                            (smtpmail-smtp-user           . ,(personal-mail))
                            (user-mail-address            . ,(personal-mail))))
                  ,(make-mu4e-context
                    :name "BITS"
                    :match-func (lambda (msg) (when msg
                                                (string-prefix-p "/BITS" (mu4e-message-field msg :maildir))))
                    :vars `(
                            (mu4e-refile-folder           . "/BITS/[Gmail].Archive")
                            (mu4e-drafts-folder           . "/BITS/[Gmail].Drafts")
                            (mu4e-sent-folder             . "/BITS/[Gmail].Sent Mail")
                            (mu4e-trash-folder            . "/BITS/Trash")
                            (smtpmail-stream-type         . tls)
                            (smtpmail-default-smtp-server . "smtp.gmail.com")
                            (smtpmail-smtp-server         . "smtp.gmail.com")
                            (smtpmail-smtp-service        . 587)
                            (user-mail-address            . ,(college-mail))
                            (smtpmail-smtp-user           . ,(college-mail))))))))
#+END_SRC

#+RESULTS:
: t

Create org-mode tasks with links to emails
#+BEGIN_SRC emacs-lisp
(require 'org-mu4e)
;;store link to message if in header view, not to header query
(setq mu4e-org-link-query-in-headers-mode nil)
(setq org-capture-templates
      '(("t" "todo" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))
#+END_SRC
Email notifications
#+BEGIN_SRC emacs-lisp
(mu4e-alert-set-default-style 'libnotify)
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
(add-hook 'mu4e-index-updated-hook #'parrot-start-animation)
(setq doom-modeline-mu4e t)
#+END_SRC

*** Clojure cookbook
#+BEGIN_SRC emacs-lisp
(defun increment-clojure-cookbook ()
  "When reading the Clojure cookbook, find the next section, and
close the buffer. If the next section is a sub-directory or in
the next chapter, open Dired so you can find it manually."
  (interactive)
  (let* ((cur (buffer-name))
         (split-cur (split-string cur "[-_]"))
         (chap (car split-cur))
         (rec (car (cdr split-cur)))
         (rec-num (string-to-number rec))
         (next-rec-num (1+ rec-num))
         (next-rec-s (number-to-string next-rec-num))
         (next-rec (if (< next-rec-num 10)
                       (concat "0" next-rec-s)
                     next-rec-s))
         (target (file-name-completion (concat chap "-" next-rec) "")))
    (progn
      (if (equal target nil)
          (dired (file-name-directory (buffer-file-name)

        (find-file target))))
      (kill-buffer cur))))
(map! :map adoc-mode-map "M-+" #'increment-clojure-cookbook)
#+END_SRC
*** tree-sitter
#+BEGIN_SRC emacs-lisp
(use-package tree-sitter
  :config
  (progn (require 'tree-sitter-langs)
         (global-tree-sitter-mode)
         (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
         (load "~/.config/doom/queries.el")))
#+END_SRC

*** set online-judge directory
#+BEGIN_SRC emacs-lisp
(setq oj-home-dir "~/cp-contests/oj")
#+END_SRC

**** (not needed rn)
#+BEGIN_SRC emacs-lisp
;(use-package dap-gdb-lldb
;  :config (dap-gdb-lldb-setup))
#+END_SRC
*** Discord RPC
#+BEGIN_SRC emacs-lisp
(require 'elcord)
(elcord-mode)
#+END_SRC
